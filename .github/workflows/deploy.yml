name: Push the Docker image to AWS ECR Repo
  on:
    push:
      branches:
        - main
  jobs:
    Build:
      name: Build
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-south-1

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image to ECR
        env:
          ECR_URI: ${{ secrets.ECR_URI }}
        run: |
          # Build Docker Image
          docker build -t $ECR_URI:latest .
          
          # Tag Image
          docker tag $ECR_URI:latest $ECR_URI:latest

          # Push Image to ECR
          docker push $ECR_URI:latest

      - name: Install SSH Key
        env:
          KEY: ${{ secrets.EC2_KEY }}
        run: |
          echo "$KEY" > key.pem
          chmod 600 key.pem

      - name: Deploy Docker Container on EC2
        env:
          REGION: ${{ env.REGION }}
        run: |
          EC2_HOST="${{ secrets.EC2_HOST }}"
          
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$EC2_HOST << 'EOF'
            # Stop and remove any existing Docker containers
            docker ps -q --filter "ancestor=$ECR_URI:latest" | xargs -r docker stop
            docker ps -aq --filter "ancestor=$ECR_URI:latest" | xargs -r docker rm

            # Pull the latest image from ECR
            aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URI
            docker pull $ECR_URI:latest

            # Run the container
            docker run -d --name nodejs-app -p 3000:3000 $ECR_URI:latest
          EOF

      - name: Clean Up
        run: |
          rm key.pem
